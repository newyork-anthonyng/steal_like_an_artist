03. Ariel Wen Zhang

Lessons Learned
1. Test Driven Development
I used Test Driven Development (TDD) when developing the API's that created the typing animation.
TDD has a lot of different definitions to different people. To me, TDD is a mindset where you write tests for your code first, then write the minimum amount of code that makes your tests pass, and then refactor. All three steps are necessary to keeping your code focused and elegant while giving you confidence in your code.

Most people think of TDD as tests, but tests are only a side effect of TDD; testing isn't the main purpose of TDD. I think the main purpose of TDD is to think more about the structure of your code and how it will be used.

 When I was done creating the API's and bootstrapped my project, it worked perfectly right out of the box.

2. Grunt Uglify
Similar to how I used Grunt to minify my CSS files, I also used Grunt to minify my two javascript files. It allowed me to combine two files into one and save me from making an extra request to get a file (which should make the webpage load faster).
When minifying files, most tools replace your human-readable variable names with something uglier (like the name implies). This might be an issue if you're relying on using a variable name; for instance, my code was calling a function that was named domApp. By minifying it, my function "domApp" would be turned into "a". Luckily, uglify has a ton of options, including "mangle." This tells grunt not to change your variable and function names. Awesome.

Improvements
1. Webpack
When combining my JavaScript files into one minified file, I ran into an issue where my files had to be loaded in a certain order.
I think using Webpack would have helped me. From the brief Webpack tutorial I had (shout out to Syed from General Assembly), you can explicitly define the dependencies your code has to other files. So instead of the order of your script tags inside your HTML page implicitly showing your dependencies, all of your files are treated as independent modules that you explicitly import and export.

Example:
<script src="lebron.js"></script>
<script src="threes.js"></script>
<script src="curry.js"></script>
You might see the above script tags inside of an HTML page which might express file dependencies. If the curry.js depended on the threes.js file, then rearranging these script tags would break your page.
Notice that lebron.js is on top of both of these files. Does this mean that threes.js depends on lebron.js? Would moving it break anything? Or is there no relationship between the files at all? Webpack would solve all of these issues.

2. Assets
The gif on Ariel's website is adorable and adds a certain charm to the website. In the future, I definitely want to level up my art skills and create my own art assets.

3. Fonts
This is the first project that required working with a large amount of text. I concentrated mainly on working on the layout of the website. All of the typography were afterthoughts and I feel like they're an eye sore.

Inspiration
www.arielwenzhang.com
